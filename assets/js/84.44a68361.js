(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{440:function(t,s,a){"use strict";a.r(s);var e=a(44),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"docker-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-file"}},[t._v("#")]),t._v(" docker file")]),t._v(" "),a("p",[t._v("Dockerfile 是 Docker 中用于定义镜像自动化构建流程的配置文件，在 Dockerfile 中，包含了构建镜像过程中需要执行的命令和其他操作。通过 Dockerfile 我们可以更加清晰、明确的给定 Docker 镜像的制作过程，而由于其仅是简单、小体积的文件，在网络等其他介质中传递的速度极快，能够更快的帮助我们实现容器迁移和集群部署。")]),t._v(" "),a("p",[t._v("Dockerfile 的内容很简单，主要以两种形式呈现，一种是注释行，另一种是指令行。")]),t._v(" "),a("h3",{attrs:{id:"docker-file-优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-file-优势"}},[t._v("#")]),t._v(" docker file 优势")]),t._v(" "),a("p",[t._v("相对于之前我们介绍的提交容器修改，再进行镜像迁移的方式相比，使用 Dockerfile 进行这项工作有很多优势，我总结了几项尤为突出的。")]),t._v(" "),a("ol",[a("li",[t._v("Dockerfile 的体积远小于镜像包，更容易进行快速迁移和部署。")]),t._v(" "),a("li",[t._v("环境构建流程记录了 Dockerfile 中，能够直观的看到镜像构建的顺序和逻辑。")]),t._v(" "),a("li",[t._v("使用 Dockerfile 来构建镜像能够更轻松的实现自动部署等自动化流程。")]),t._v(" "),a("li",[t._v("在修改环境搭建细节时，修改 Dockerfile 文件要比从新提交镜像来的轻松、简单。")])]),t._v(" "),a("h3",{attrs:{id:"docker-指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-指令"}},[t._v("#")]),t._v(" docker 指令")]),t._v(" "),a("p",[t._v("如果进行细分，我们可以将 Dockerfile 的指令简单分为五大类。")]),t._v(" "),a("ol",[a("li",[t._v("基础指令：用于定义新镜像的基础和性质。")]),t._v(" "),a("li",[t._v("控制指令：是指导镜像构建的核心部分，用于描述镜像在构建过程中需要执行的命令。")]),t._v(" "),a("li",[t._v("引入指令：用于将外部文件直接引入到构建镜像内部。")]),t._v(" "),a("li",[t._v("执行指令：能够为基于镜像所创建的容器，指定在启动时需要执行的脚本或命令。")]),t._v(" "),a("li",[t._v("配置指令：对镜像以及基于镜像所创建的容器，可以通过配置指令对其网络、用户等内容进行配置。")])]),t._v(" "),a("h3",{attrs:{id:"dockerfile-的组成部分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-的组成部分"}},[t._v("#")]),t._v(" Dockerfile 的组成部分")]),t._v(" "),a("ol",[a("li",[t._v("基础镜像信息 FROM")]),t._v(" "),a("li",[t._v("维护者信息 MAINTAINER LABEL")]),t._v(" "),a("li",[t._v("镜像操作指令 RUN、COPY、ADD、EXPOSE、WORKDIR、ONBUILD、USER、VOLUME 等")]),t._v(" "),a("li",[t._v("容器启动时执行指令 CMD、ENTRYPOINT")])]),t._v(" "),a("h3",{attrs:{id:"dockerignore-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerignore-文件"}},[t._v("#")]),t._v(" .dockerignore 文件")]),t._v(" "),a("p",[t._v("要排除与构建无关的文件（不重构源存储库），请使用.dockerignore 文件。此文件支持类似于.gitignore 文件的排除模式")]),t._v(" "),a("h4",{attrs:{id:"from"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#from"}},[t._v("#")]),t._v(" FROM")]),t._v(" "),a("p",[t._v("在 Dockerfile 里，我们可以通过 FROM 指令指定一个基础镜像，接下来所有的指令都是基于这个镜像所展开的。在镜像构建的过程中，Docker 也会先获取到这个给出的基础镜像，再从这个镜像上进行构建操作。")]),t._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" <image"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("AS <name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" <image"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("<tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("AS <name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" <image"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("@<digest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("AS <name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 scratch。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。")]),t._v(" "),a("p",[t._v("如果你以 scratch 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。")]),t._v(" "),a("div",{staticClass:"language-Dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" scratch\n")])])]),a("h4",{attrs:{id:"run"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#run"}},[t._v("#")]),t._v(" RUN")]),t._v(" "),a("p",[t._v("镜像的构建虽然是按照指令执行的，但指令只是引导，最终大部分内容还是控制台中对程序发出的命令，而 RUN 指令就是用于向控制台发送命令的指令。")]),t._v(" "),a("p",[t._v("在 RUN 指令之后，我们直接拼接上需要执行的命令，在构建时，Docker 就会执行这些命令，并将它们对文件系统的修改记录下来，形成镜像的变化。")]),t._v(" "),a("p",[t._v("Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。所以我们使用\\换行符和&& 符号连接命令，这样执行后，只会创建 1 层镜像。")]),t._v(" "),a("p",[t._v("RUN 是在 docker build 时运行")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# <命令行命令> 等同于，在终端操作的 shell 命令。")]),t._v("\nRUN "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("command"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# exec 格式")]),t._v("\nRUN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"可执行文件"')]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"参数1"')]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"参数2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("RUN 指令是支持 \\ 换行的，如果单行的长度过长，建议对内容进行切割，方便阅读。而事实上，我们会经常看到 \\ 分割的命令，例如在上面我们贴出的 Redis 镜像的 Dockerfile 里。")]),t._v(" "),a("h4",{attrs:{id:"entrypoint-和-cmd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint-和-cmd"}},[t._v("#")]),t._v(" ENTRYPOINT 和 CMD")]),t._v(" "),a("p",[t._v("基于镜像启动的容器，在容器启动时会根据镜像所定义的一条命令来启动容器中进程号为 1 的进程。而这个命令的定义，就是通过 Dockerfile 中的 ENTRYPOINT 和 CMD 实现的。")]),t._v(" "),a("p",[t._v("CMD 指令就是用于指定默认的容器主进程的启动命令的。")]),t._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENTRYPOINT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"executable"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"param1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"param2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENTRYPOINT")]),t._v(" command param1 param2\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# exec 格式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"executable"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"param1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"param2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"param1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"param2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# <命令行命令> 等同于，在终端操作的 shell 命令。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" command param1 param2\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 shell 格式的话，实际的命令会被包装为 sh -c 的参数的形式进行执行。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" echo $HOME\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sh"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo $HOME"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("CMD 是在 docker run 时运行，为启动的容器指定默认要运行的程序")]),t._v(" "),a("p",[t._v("RUN 是在构建的时候执行，并生成一个新的镜像，CMD 在构建时不进行任何操作，在容器运行的时候执行。")]),t._v(" "),a("p",[t._v("ENTRYPOINT 指令和 CMD 指令的用法近似，都是给出需要执行的命令，并且它们都可以为空，或者说是不在 Dockerfile 里指出。")]),t._v(" "),a("p",[t._v("ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数。ENTRYPOINT 在运行时也可以替代，不过比 CMD 要略显繁琐，需要通过 docker run 的参数 --entrypoint 来指定。")]),t._v(" "),a("p",[t._v("当 ENTRYPOINT 与 CMD 同时给出时，CMD 中的内容会作为 ENTRYPOINT 定义命令的参数，最终执行容器启动的还是 ENTRYPOINT 中给出的命令。")]),t._v(" "),a("h3",{attrs:{id:"label"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#label"}},[t._v("#")]),t._v(" LABEL")]),t._v(" "),a("p",[t._v("给构建的镜像打标签。")]),t._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LABEL")]),t._v(" <key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("=<value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" <key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("=<value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" <key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("=<value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LABEL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.example.vendor"')]),t._v("="),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ACME Incorporated"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LABEL")]),t._v(" com.example.label"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("with"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("value="),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LABEL")]),t._v(" version="),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.0"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LABEL")]),t._v(" description="),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This text illustrates \\\nthat label-values can span multiple lines."')]),t._v("\n")])])]),a("h3",{attrs:{id:"workdir"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#workdir"}},[t._v("#")]),t._v(" WORKDIR")]),t._v(" "),a("p",[t._v("为接下来的 Dockerfile 指令指定当前工作目录，可多次使用，如果使用的是相对路径，则相对的是上一个工作目录，类似 shell 中的 cd 命令。")]),t._v(" "),a("h4",{attrs:{id:"expose"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expose"}},[t._v("#")]),t._v(" EXPOSE")]),t._v(" "),a("p",[t._v("通过 EXPOSE 指令就可以为镜像指定要暴露的端口。")]),t._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXPOSE")]),t._v(" <port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("<port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("/<protocol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("当我们通过 EXPOSE 指令配置了镜像的端口暴露定义，那么基于这个镜像所创建的容器，在被其他容器通过 --link 选项连接时，就能够直接允许来自其他容器对这些端口的访问了。")]),t._v(" "),a("h4",{attrs:{id:"volume"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volume"}},[t._v("#")]),t._v(" VOLUME")]),t._v(" "),a("p",[t._v("在 Dockerfile 里，提供了 VOLUME 指令来定义基于此镜像的容器所自动建立的数据卷。")]),t._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VOLUME")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h4",{attrs:{id:"copy-和-add"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copy-和-add"}},[t._v("#")]),t._v(" COPY 和 ADD")]),t._v(" "),a("p",[t._v("在制作新的镜像的时候，我们可能需要将一些软件配置、程序代码、执行脚本等直接导入到镜像内的文件系统里，使用 COPY 或 ADD 指令能够帮助我们直接从宿主机的文件系统里拷贝内容到镜像里的文件系统中。")]),t._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("chown=<user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("<group"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" <src"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v(" <dest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("chown=<user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("<group"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" <src"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v(" <dest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 例如")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" package.json /usr/src/app/\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("chown=<user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("<group"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<src>"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<dest>"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("chown=<user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("<group"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<src>"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<dest>"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("<源路径>相对于构建上下文目录，就是 build 后面的那个目录")]),t._v(" "),a("p",[t._v("<目标路径> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 WORKDIR 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。")]),t._v(" "),a("p",[t._v("COPY 与 ADD 指令的定义方式完全一样，需要注意的仅是当我们的目录中存在空格时，可以使用后两种格式避免空格产生歧义。")]),t._v(" "),a("p",[t._v("对比 COPY 与 ADD，两者的区别主要在于 ADD 能够支持使用网络端的 URL 地址作为 src 源，并且在源文件被识别为压缩包时，自动进行解压，而 COPY 没有这两个能力。")]),t._v(" "),a("p",[t._v("虽然看上去 COPY 能力稍弱，但对于那些不希望源文件被解压或没有网络请求的场景，COPY 指令是个不错的选择。")]),t._v(" "),a("h3",{attrs:{id:"构建镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建镜像"}},[t._v("#")]),t._v(" 构建镜像")]),t._v(" "),a("p",[t._v("在编写好 Dockerfile 之后，我们就可以构建我们所定义的镜像了，构建镜像的命令为 docker build。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" docker build ./webapp\n")])])]),a("p",[t._v("docker build 可以接收一个参数，需要特别注意的是，这个参数为一个目录路径 ( 本地路径或 URL 路径 )，而并非 Dockerfile 文件的路径。在 docker build 里，这个我们给出的目录会作为构建的环境目录，我们很多的操作都是基于这个目录进行的。")]),t._v(" "),a("p",[t._v("例如，在我们使用 COPY 或是 ADD 拷贝文件到构建的新镜像时，会以这个目录作为基础目录。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("COPY ./package.json /app/\n")])])]),a("p",[t._v("这并不是要复制执行 docker build 命令所在的目录下的 package.json，也不是复制 Dockerfile 所在目录下的 package.json，而是复制 上下文（context） 目录下的 package.json。")]),t._v(" "),a("p",[t._v("在默认情况下，docker build 也会从这个目录下寻找名为 Dockerfile 的文件，将它作为 Dockerfile 内容的来源。如果我们的 Dockerfile 文件路径不在这个目录下，或者有另外的文件名，我们可以通过 -f 选项单独给出 Dockerfile 文件的路径。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" docker build -t webapp:latest -f ./webapp/a.Dockerfile ./webapp\n")])])]),a("p",[t._v("当然，在构建时我们最好总是携带上 -t 选项，用它来指定新生成镜像的名称。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" docker build -t webapp:latest ./webapp\n")])])]),a("p",[t._v("如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 .gitignore 一样的语法写一个 .dockerignore，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。")]),t._v(" "),a("p",[t._v("实际上 Dockerfile 的文件名并不要求必须为 Dockerfile，而且并不要求必须位于上下文目录中，比如可以用 -f ../Dockerfile.php 参数指定某个文件作为 Dockerfile。")]),t._v(" "),a("h3",{attrs:{id:"构建时使用变量或环境变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建时使用变量或环境变量"}},[t._v("#")]),t._v(" 构建时使用变量或环境变量")]),t._v(" "),a("p",[t._v("在 Dockerfile 里，我们可以用 ARG 指令来建立一个参数变量，使用 ENV 建立环境变量我们可以在构建时通过构建指令传入这个参数变量，并且在 Dockerfile 里使用它。")]),t._v(" "),a("p",[t._v("环境变量的值是直接定义的 如果需要更改可以在构建时通过构建指令传入")]),t._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" debian"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("stretch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("slim\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ......")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ARG")]),t._v(" TOMCAT_MAJOR\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ARG")]),t._v(" TOMCAT_VERSION\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第一种定义变量的方式 key value")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" TOMCAT_MAJOR 8\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第二种定义变量方式 key=value")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" TOMCAT_VERSION=8.0.53\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ......")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" wget "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("O tomcat.tar.gz "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://www.apache.org/dyn/closer.cgi?action=download&filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ......")]),t._v("\n")])])]),a("p",[t._v("如果我们需要通过这个 Dockerfile 文件构建 Tomcat 镜像，我们可以在构建时通过 docker build 的 --build-arg 选项来设置参数变量。通过-e 或者--env 修改环境变量")]),t._v(" "),a("p",[t._v("与参数变量只能影响构建过程不同，环境变量不仅能够影响构建，还能够影响基于此镜像创建的容器。所以构建的时候我们可以传环境变量 在运行的时候我们也还可以传递环境变量")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 传递变量")]),t._v("\ndocker build --build-arg "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("TOMCAT_MAJOR")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" --build-arg "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("TOMCAT_VERSION")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.0")]),t._v(".53 -t tomcat:8.0 ./tomcat\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改环境变量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" docker run -e "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("TOMCAT_MAJOR")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" -d mysql:5.7\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);