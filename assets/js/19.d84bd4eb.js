(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{375:function(t,o,_){"use strict";_.r(o);var s=_(44),a=Object(s.a)({},(function(){var t=this,o=t.$createElement,_=t._self._c||o;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"什么是原型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是原型"}},[t._v("#")]),t._v(" 什么是原型")]),t._v(" "),_("p",[t._v("在 js 中我们是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性值，这个属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当我们使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。")]),t._v(" "),_("p",[t._v("我们可以通过"),_("code",[t._v("obj.__proto__")]),t._v("或者 Object.getPrototypeOf(obj)或者 obj.constructor.prototype 获取对象的原型。")]),t._v(" "),_("h2",{attrs:{id:"prototype-和-proto"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#prototype-和-proto"}},[t._v("#")]),t._v(" prototype 和"),_("code",[t._v("__proto__")])]),t._v(" "),_("p",[t._v("对象有"),_("code",[t._v("__proto__")]),t._v("属性，函数有"),_("code",[t._v("__proto__")]),t._v("属性，数组也有"),_("code",[t._v("__proto__")]),t._v("属性，只要是引用类型，就有"),_("code",[t._v("__proto__")]),t._v("属性，指向其原型。")]),t._v(" "),_("p",[t._v("只有构造函数有 prototype 属性，指向 new 操作符加调用该函数创建的对象实例的原型对象。 Person.prototype == people."),_("code",[t._v("__proto__")]),t._v("对象的"),_("code",[t._v("__proto__")]),t._v("等于其构造函数的 prototype")]),t._v(" "),_("h2",{attrs:{id:"什么是原型链"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是原型链"}},[t._v("#")]),t._v(" 什么是原型链")]),t._v(" "),_("p",[t._v("当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。或者说是由对象的"),_("code",[t._v("__proto__")]),t._v("属性串连起来的直到 Object."),_("code",[t._v("prototype.__proto__（为null）")]),t._v("的链就是原型链。")]),t._v(" "),_("h2",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),_("p",[t._v("prototype 是函数的原型对象，即 prototype 是一个对象，它会被对应的"),_("code",[t._v("__proto__")]),t._v("引用。")]),t._v(" "),_("p",[t._v("要知道自己的"),_("code",[t._v("__proto__")]),t._v("引用了哪个 prototype，只需要看看是哪个构造函数构造了你，那你的"),_("code",[t._v("__proto__")]),t._v("就是那个构造函数的 prototype。")]),t._v(" "),_("p",[t._v("所有的构造函数的原型链最后都会引用 Object 构造函数的原型，即可以理解 Object 构造函数的原型是所有原型链的最底层，即 "),_("code",[t._v("Object.prototype.__proto__")]),t._v("===null")]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[t._v("Object"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//造函数的__proto__ 等于Function的prototype")]),t._v("\nFunction"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//构造函数的__proto__ 等于Function的prototype")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//对象的__proto__等于Object的prototype")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("h2",{attrs:{id:"如何判断一个属性是否是对象本身的属性呢"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何判断一个属性是否是对象本身的属性呢"}},[t._v("#")]),t._v(" 如何判断一个属性是否是对象本身的属性呢")]),t._v(" "),_("p",[t._v("使用 hasOwnProperty()方法。即 obj.hasOwnProperty(prop);")]),t._v(" "),_("h2",{attrs:{id:"如何获取一个对象的原型呢"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何获取一个对象的原型呢"}},[t._v("#")]),t._v(" 如何获取一个对象的原型呢？")]),t._v(" "),_("p",[t._v("使用 Object.getPrototypeOf(obj)")]),t._v(" "),_("h2",{attrs:{id:"如何判断一个对象是不是另外一个对象的原型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何判断一个对象是不是另外一个对象的原型"}},[t._v("#")]),t._v(" 如何判断一个对象是不是另外一个对象的原型？")]),t._v(" "),_("p",[t._v("obj.isPrototypeOf(obj2)")])])}),[],!1,null,null,null);o.default=a.exports}}]);