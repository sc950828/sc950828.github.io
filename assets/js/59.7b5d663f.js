(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{415:function(t,a,s){"use strict";s.r(a);var e=s(44),v=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#步骤"}},[t._v("#")]),t._v(" 步骤")]),t._v(" "),s("p",[t._v("从用户输入域名到浏览器渲染页面的过程，可以分为以下几个步骤：")]),t._v(" "),s("ol",[s("li",[t._v("域名解析")]),t._v(" "),s("li",[t._v("网络请求")]),t._v(" "),s("li",[t._v("服务器处理")]),t._v(" "),s("li",[t._v("浏览器渲染")])]),t._v(" "),s("h2",{attrs:{id:"域名解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#域名解析"}},[t._v("#")]),t._v(" 域名解析")]),t._v(" "),s("p",[t._v("DNS 就是域名系统，作用是将域名解析成对应的 IP 地址。具体的解析过程")]),t._v(" "),s("ol",[s("li",[t._v("输入一个 url，首先浏览器会对 url 进行解析，取出主机名")]),t._v(" "),s("li",[t._v("接着查找浏览器自身的 DNS 缓存，查到返回对应 IP")]),t._v(" "),s("li",[t._v("没有找到，在本机找 Host 文件是否有对应的 IP（host 文件就是域名和 ip 的映射关系表），查到就返回 IP")]),t._v(" "),s("li",[t._v("没有的话，本地 DNS 服务器开始查找，向各级的 DNS 服务器（管理方 DNS 服务器、其他 DNS 服务器、顶层 DNS 服务器、根 DNS 服务器）发送查询报文，获取对应的 IP 地址")])]),t._v(" "),s("p",[t._v("在每次查找的过程中，浏览器，应用程序，DNS 服务器都会对域名进行缓存，如果命中缓存，DNS 会直接返回对应的 IP，没有命中则继续查找相关的域名服务器，寻找 IP。")]),t._v(" "),s("p",[t._v("分析可知这个阶段，我们能优化的方法有限，常见的做法有：")]),t._v(" "),s("ol",[s("li",[t._v("在 html 文件增加 DNS 缓存标签")]),t._v(" "),s("li",[t._v("通过将域名解析到多个 IP，做 DNS 的负载均衡")])]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 会预取g.test.com解析 --\x3e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("dns-prefetch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("//g.alicdn.com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 自动开启DNS解析功能 --\x3e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("x-dns-prefetch-control"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("on"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),s("h2",{attrs:{id:"网络请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络请求"}},[t._v("#")]),t._v(" 网络请求")]),t._v(" "),s("h3",{attrs:{id:"网络链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络链接"}},[t._v("#")]),t._v(" 网络链接")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://xiaosu72.oss-cn-shanghai.aliyuncs.com/blog/images/%E6%9C%AA%E5%91%BD%E5%90%8D1623221100.png",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"http-请求过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-请求过程"}},[t._v("#")]),t._v(" http 请求过程")]),t._v(" "),s("ol",[s("li",[t._v("首先如果是第一次请求，域名经过 DNS 服务器解析拿到映射的 IP")]),t._v(" "),s("li",[t._v("这里客户端发送 http 报文给对应的服务器，这个过程中要经过应用层、传输层、网络层、数据链路层和物理层对数据报的层层处理")]),t._v(" "),s("li",[t._v("客户端和服务器（或代理服务器）进行三次握手建立 TCP 连接")]),t._v(" "),s("li",[t._v("然后服务器返回对应的资源给客户端")]),t._v(" "),s("li",[t._v("如果是第二次及以上的请求，浏览器或服务器会通过 http 的 header 参数，判断资源是否过期(这里涉及到强缓存，协商缓存)，如果没有过期，则使用缓存，如果过期，就去服务器拿新的资源")])]),t._v(" "),s("h3",{attrs:{id:"五层计算机体系模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五层计算机体系模型"}},[t._v("#")]),t._v(" 五层计算机体系模型")]),t._v(" "),s("p",[t._v("第二步，这里客户端发送 http 报文给对应的服务器，具体的过程为：")]),t._v(" "),s("ol",[s("li",[t._v("首先应用层提供了很多协议，包括：http、ftp、POP3、IMAP，这里浏览器使用的是 http 协议，首先浏览器会在应用层，把请求的数据报按照 http 协议要求的格式，定义一系列请求的字段，推进 TCP 套接字，等待运输层接收。")]),t._v(" "),s("li",[t._v("运输层主要的协议有：TCP 和 UDP，运输层拿到数据报以后，会先看是否和目的主机建立连接，如果没有，则进行三次握手，建立 TCP 连接。如果连接成功，会对数据报进一步封装，增加源主机端口号和目的主机端口号，进行差错检测，然后传递到网络层。")]),t._v(" "),s("li",[t._v("网络层主要协议有：IP 协议，接收运输层的数据报，然后增加目的主机 IP，封装成一段段符合 IP 协议的 IP 数据报，经过若干个路由到达数据链路层")]),t._v(" "),s("li",[t._v("数据链路层有 ARP 协议，可以通过 IP 地址解析目标地址的 mac 地址，通过物理层转发出去，到达目的局域网后，通过广播，被目的主机接收")])]),t._v(" "),s("h3",{attrs:{id:"浏览器缓存策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存策略"}},[t._v("#")]),t._v(" 浏览器缓存策略")]),t._v(" "),s("p",[t._v("浏览器的缓存策略，有助于提高网页加载速度，减轻服务器压力。")]),t._v(" "),s("p",[t._v("缓存分为强缓存和协商缓存。")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("当我们输入 url，浏览器会去查看自身是否有缓存，如果没有缓存会直接请求服务器获取资源，并缓存到浏览器一份，返回数据会携带 ETag 字段和 Last-Modified 字段，状态码 200 OK（from memory cache）,其中 ETag 是文件计算的 hash 值，如果文件不发生改变，这个值不会变。Last-Modified 是文件最后的修改时间，如果文件更新或者覆盖就会显示最新的时间")])]),t._v(" "),s("li",[s("p",[t._v("如果浏览器有缓存，此时检查 http 的请求头，看 cache-control、expires 字段，判断是否过了缓存的有效期，如果没有过有效期，则返回 200 状态码和对应的缓存数据。此时命中的是强缓存。")])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("强缓存分为 expires、cache-control 两种，两者同时存在，cache-control 优先级高")])]),t._v(" "),s("li",[s("p",[t._v("expires 是 http1.0 的定义，返回一个绝对的时间 GMT，为过期时间。这就导致如果服务器时间和浏览器时间不一致，可能会使缓存失效。")])]),t._v(" "),s("li",[s("p",[t._v("cache-control 是 http1.1 的定义")]),t._v(" "),s("ul",[s("li",[t._v("Cache-Control 服务端参数\n"),s("ul",[s("li",[t._v("max-age: 在多少秒内有效")]),t._v(" "),s("li",[t._v("s-maxage: 就是用于表示 cache 服务器上（比如 cache CDN，缓存代理服务器）的缓存的有效时间的，并只对 public 缓存有效。")]),t._v(" "),s("li",[t._v("no-cache：不使用本地强缓存。需要使用缓存协商，先与服务器确认返回的响应是否被更改，如果之前的响应中存在 ETag，那么请求的时候会与服务端验证，如果资源未被更改，则可以避免重新下载。")]),t._v(" "),s("li",[t._v("no-store：直接禁止浏览器缓存数据，每次用户请求该资源，都会向服务器发送一个请求，每次都会下载完整的资源。")]),t._v(" "),s("li",[t._v("public：可以被所有的用户缓存，包括终端用户和 CDN 等中间代理服务器。")]),t._v(" "),s("li",[t._v("private：只能被终端用户的浏览器缓存，不允许 CDN 等中继缓存服务器对其缓存。默认的。")])])]),t._v(" "),s("li",[t._v("Cache-Control 客户端参数\n"),s("ul",[s("li",[t._v("max-stale: 5 表示客户端到代理服务器上拿缓存的时候，即使代理缓存过期了也不要紧，只要过期时间在 5 秒之内，还是可以从代理中获取的。")]),t._v(" "),s("li",[t._v("min-fresh: 5 表示代理缓存需要一定的新鲜度，不要等到缓存刚好到期再拿，一定要在到期前 5 秒之前的时间拿，否则拿不到。")]),t._v(" "),s("li",[t._v("only-if-cached 这个字段加上后表示客户端只会接受代理缓存，而不会接受源服务器的响应。如果代理缓存无效，则直接返回 504（Gateway Timeout）。")])])])])])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("如果浏览器缓存已过期，就携带请求头字段 If-None-Match 和 If-Modified-Since 去服务器拉取资源，服务器看到这两个字段，发现和当前服务器资源一致，就直接返回缓存和状态码 304。服务器一般会先验证 If-None-Match，如果不变，再去验证 If-Modified-Since。此时命中的是协商缓存。")])]),t._v(" "),s("ul",[s("li",[t._v("协商缓存分为 If-None-Match/ETag 组合、If-Modified-Since/Last-Modified 组合两种，两者同时存在，If-None-Match/ETag 优先级高。ETag 和 Last-Modified 是在响应头中，If-None-Match 和 If-Modified-Since 是在请求头中，值是对应的 ETag 和 Last-Modified 的值。")])]),t._v(" "),s("h2",{attrs:{id:"服务器处理阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务器处理阶段"}},[t._v("#")]),t._v(" 服务器处理阶段")]),t._v(" "),s("p",[t._v("服务器接收到请求，协商缓存查看资源是否有变化，如果没有变化直接返回缓存资源。")]),t._v(" "),s("p",[t._v("这里如果存在代理服务器或者 CDN 节点，那么相当于增加了一个缓存节点，首先请求会转发到最新的 CDN 节点，CDN 节点收到请求后会判断当前资源是否命中协商缓存，如果过期就回源请求最新的资源，如果没有过期就返回缓存资源。")]),t._v(" "),s("p",[t._v("CDN 的存在解决了跨地域请求的时延问题；对服务器压力进行了分流。")]),t._v(" "),s("p",[t._v("四次挥手：如果请求结束，服务器和客户端进行四次挥手，断开连接。")]),t._v(" "),s("h2",{attrs:{id:"页面渲染阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#页面渲染阶段"}},[t._v("#")]),t._v(" 页面渲染阶段")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7169ac55453c4138a61c1f733524ff5c~tplv-k3u1fbpfcp-watermark.image",alt:"image"}})]),t._v(" "),s("ol",[s("li",[t._v("下载解析 HTML 文件，构建 DOM 树。下载解析 CSS 生成 CSSDOM 树。这两个是并行的。")]),t._v(" "),s("li",[t._v("CSSDOM 树构建完成与 DOM 树组合形成 RenderObject 树。")]),t._v(" "),s("li",[t._v("根据 render 树布局（Layout），负责各元素尺寸、位置的计算。(涉及到回流)")]),t._v(" "),s("li",[t._v("根据 render 树绘制（paint），绘制页面像素信息。(涉及到重绘)")]),t._v(" "),s("li",[t._v("浏览器会将各层的信息发送给 GUI，GUI 将各层合成（composite），显示在屏幕上。")])]),t._v(" "),s("h2",{attrs:{id:"缓存常见问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存常见问题"}},[t._v("#")]),t._v(" 缓存常见问题")]),t._v(" "),s("h3",{attrs:{id:"强缓存-协商缓存区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强缓存-协商缓存区别"}},[t._v("#")]),t._v(" 强缓存 协商缓存区别？")]),t._v(" "),s("ul",[s("li",[t._v("强缓存不会发送请求，返回状态码 200")]),t._v(" "),s("li",[t._v("协商缓存会发送请求，返回状态码 304")])]),t._v(" "),s("h3",{attrs:{id:"强缓存-协商缓存顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强缓存-协商缓存顺序"}},[t._v("#")]),t._v(" 强缓存 协商缓存顺序？")]),t._v(" "),s("ul",[s("li",[t._v("先强缓存 Cache-Control expires")]),t._v(" "),s("li",[t._v("再协商缓存 Etag Last-Modified")])]),t._v(" "),s("h3",{attrs:{id:"etag-是由什么生成的-与另外一种协商缓存的区别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#etag-是由什么生成的-与另外一种协商缓存的区别是什么"}},[t._v("#")]),t._v(" Etag 是由什么生成的，与另外一种协商缓存的区别是什么?")]),t._v(" "),s("ul",[s("li",[t._v("Etag 是由 Last-Modified 与 Content-Length 计算而成，etag 与 If-None-Match 一起搭配组成协商缓存，这种协商缓存是下面这种协商缓存的升级版，检测时间的同时还检测文件大小，所以更准确。")]),t._v(" "),s("li",[t._v("另外一种协商缓存是 Last-Modified 与 If-Modified-Since 搭配组成的协商缓存，这种缓存只根据时间来计算，所以相对不准确，只能应用于秒级别的修改，如果在一秒内修改，检测不到。")]),t._v(" "),s("li",[t._v("在性能上，Etag 要逊于 Last-Modified，毕竟 Last-Modified 只需要记录时间，而 Etag 需要服务器通过算法来计算出文件内容的一个 hash 值。")])]),t._v(" "),s("h3",{attrs:{id:"如果-http-响应头中-etag-值改变了-是否意味着文件内容一定已经更改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如果-http-响应头中-etag-值改变了-是否意味着文件内容一定已经更改"}},[t._v("#")]),t._v(" 如果 http 响应头中 ETag 值改变了，是否意味着文件内容一定已经更改？")]),t._v(" "),s("p",[t._v("不一定，因为编辑了文件但是并未修改内容时 Last-Modified 的时间也会发生变化，所以 Etag 会重新生成。")]),t._v(" "),s("h3",{attrs:{id:"http-服务中静态文件的-last-modified-是根据什么生成的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-服务中静态文件的-last-modified-是根据什么生成的"}},[t._v("#")]),t._v(" http 服务中静态文件的 Last-Modified 是根据什么生成的？")]),t._v(" "),s("p",[t._v("更新时间")])])}),[],!1,null,null,null);a.default=v.exports}}]);