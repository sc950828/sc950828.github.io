(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{385:function(t,e,a){"use strict";a.r(e);var s=a(44),i=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"英寸"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#英寸"}},[t._v("#")]),t._v(" 英寸")]),t._v(" "),a("p",[t._v("一般用英寸描述屏幕的物理大小，如电脑显示器的 17、22，手机显示器的 4.8、5.7 等使用的单位都是英寸。需要注意尺寸都是屏幕对角线的长度。1 英寸 = 2.54 厘米")]),t._v(" "),a("h2",{attrs:{id:"像素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#像素"}},[t._v("#")]),t._v(" 像素")]),t._v(" "),a("p",[t._v("像素即一个小方块，它具有特定的位置和颜色。图片、电子屏幕（手机、电脑）就是由无数个具有特定颜色和特定位置的小方块拼接而成。")]),t._v(" "),a("h2",{attrs:{id:"屏幕分辨率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#屏幕分辨率"}},[t._v("#")]),t._v(" 屏幕分辨率")]),t._v(" "),a("p",[t._v("屏幕分辨率指一个屏幕具体由多少个像素点组成。")]),t._v(" "),a("p",[t._v("iPhone XS Max 和 iPhone SE 的分辨率分别为 2688 x 1242 和 1136 x 640。这表示手机分别在垂直和水平上所具有的像素点数。当然分辨率高不代表屏幕就清晰，屏幕的清晰程度还与尺寸有关。")]),t._v(" "),a("h2",{attrs:{id:"图像分辨率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图像分辨率"}},[t._v("#")]),t._v(" 图像分辨率")]),t._v(" "),a("p",[t._v("我们通常说的图片分辨率其实是指图片含有的像素数，比如一张图片的分辨率为 800 x 400。这表示图片分别在垂直和水平上所具有的像素点数为 800 和 400。")]),t._v(" "),a("p",[t._v("同一尺寸的图片，分辨率越高，图片越清晰。")]),t._v(" "),a("h2",{attrs:{id:"ppi"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ppi"}},[t._v("#")]),t._v(" PPI")]),t._v(" "),a("p",[t._v("PPI(Pixel Per Inch)：每英寸包括的像素数。")]),t._v(" "),a("p",[t._v("PPI 可以用于描述屏幕的清晰度以及一张图片的质量。使用 PPI 描述图片时，PPI 越高，图片质量越高，使用 PPI 描述屏幕时，PPI 越高，屏幕越清晰。")]),t._v(" "),a("p",[t._v("计算方式 水平像素点数平方与垂直像素点数平方的和的平方根除以屏幕英寸(屏幕对角线长度)。")]),t._v(" "),a("h2",{attrs:{id:"dpi"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dpi"}},[t._v("#")]),t._v(" DPI")]),t._v(" "),a("p",[t._v("DPI(Dot Per Inch)：即每英寸包括的点数。")]),t._v(" "),a("p",[t._v("平时你可能会看到使用 DPI 来描述图片和屏幕，这时的 DPI 应该和 PPI 是等价的，DPI 最常用的是用于描述打印机，表示打印机每英寸可以打印的点数。")]),t._v(" "),a("p",[t._v("所以，打印机的 DPI 越高，打印图像的精细程度就越高，同时这也会消耗更多的墨点和时间。")]),t._v(" "),a("h2",{attrs:{id:"物理像素、独立像素、设备像素比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#物理像素、独立像素、设备像素比"}},[t._v("#")]),t._v(" 物理像素、独立像素、设备像素比")]),t._v(" "),a("p",[t._v("物理像素也叫设备像素，是屏幕上最小的显示单元，即设备上真实的物理单元，在设备生产的时候就已经定好。(iphone5 640px)一般比独立像素大。")]),t._v(" "),a("p",[t._v("独立像素(DP 或 Dip)是一种虚拟像素，是逻辑上衡量像素的单位，相当于 css 像素。(iphone5 320px iphone6 375px)。")]),t._v(" "),a("p",[t._v("设备像素比 dpr 就是物理像素和独立像素的比例。在 web 中，浏览器为我们提供了 window.devicePixelRatio 来帮助我们获取 dpr。在 css 中，可以使用媒体查询 min-device-pixel-ratio 获取设备像素比。在 React Native 中，我们也可以使用 PixelRatio.get()来获取 DPR。")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token atrule"}},[a("span",{pre:!0,attrs:{class:"token rule"}},[t._v("@media")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("-webkit-min-device-pixel-ratio")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("min-device-pixel-ratio")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"k-和-p"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k-和-p"}},[t._v("#")]),t._v(" k 和 p")]),t._v(" "),a("p",[t._v("我们经常见到用 K 和 P 这个单位来形容屏幕：")]),t._v(" "),a("ul",[a("li",[t._v("P 代表的就是屏幕纵向的像素个数，1080P 即纵向有 1080 个像素，分辨率为 1920X1080 的屏幕就属于 1080P 屏幕。")]),t._v(" "),a("li",[t._v("K 代表屏幕横向有几个 1024 个像素，一般来讲横向像素超过 2048 就属于 2K 屏，横向像素超过 4096 就属于 4K 屏。")])]),t._v(" "),a("h2",{attrs:{id:"布局视口、视觉视口、理想视口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布局视口、视觉视口、理想视口"}},[t._v("#")]),t._v(" 布局视口、视觉视口、理想视口")]),t._v(" "),a("p",[t._v("布局视口，在移动端显示网页时，由于移动端的屏幕尺寸比较小，如果网页使用移动端的屏幕尺寸进行布局的话，那么整个页面的布局都会显示错乱。所以移动端浏览器提供了一个 layout viewport 布局视口的概念，使用这个视口来对页面进行布局展示，一般 layout viewport 的大小为 980px，这保证 PC 的网页可以在手机浏览器上呈现，但是非常小，用户可以手动对网页进行放大。我们可以通过调用 document.documentElement.clientWidth / clientHeight 来获取布局视口大小。布局视口可理解为你网页的宽度。")]),t._v(" "),a("p",[t._v("视觉视口，visual viewport 指的是移动设备上我们可见的区域的视口大小，一般为屏幕独立像素大小。visual viewport 和 layout viewport 的关系，就像是我们通过窗户看外面的风景，视觉视口就是窗户，而外面的风景就是布局视口中的网页内容。我们可以通过调用 window.innerWidth / innerHeight 来获取视觉视口大小。")]),t._v(" "),a("p",[t._v("理想视口，由于 layout viewport 一般比 visual viewport 要大，所以想要看到整个页面必须通过拖动和缩放才能实现。所以又提出了 ideal viewport 的概念，ideal viewport 下用户不用缩放和滚动条就能够查看到整个页面，并且页面在不同分辨率下显示的内容大小相同。ideal viewport 其实就是通过修改 layout viewport 的大小，让它等于设备的宽度，这个宽度可以理解为是设备独立像素，因此根据 ideal viewport 设计的页面，在不同分辨率的屏幕下，显示应该相同。我们可以通过调用 screen.width / height 来获取理想视口大小，返回的是设备独立像素。理想视口可理解为布局视口与视觉视口相等。")]),t._v(" "),a("h2",{attrs:{id:"viewport"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#viewport"}},[t._v("#")]),t._v(" viewport")]),t._v(" "),a("p",[t._v("width 正整数或 device-width 以 pixels（像素）为单位， 定义布局视口的宽度。")]),t._v(" "),a("p",[t._v("height 正整数或 device-height 以 pixels（像素）为单位， 定义布局视口的高度。")]),t._v(" "),a("p",[t._v("initial-scale0.0 - 10.0 定义页面初始缩放比率。")]),t._v(" "),a("p",[t._v("minimum-scale0.0 - 10.0 定义缩放的最小值；必须小于或等于 maximum-scale 的值。")]),t._v(" "),a("p",[t._v("maximum-scale0.0 - 10.0 定义缩放的最大值；必须大于或等于 minimum-scale 的值。")]),t._v(" "),a("p",[t._v("user-scalable 一个布尔值（yes 或者 no）如果设置为 no，用户将不能放大或缩小网页。默认值为 yes。")]),t._v(" "),a("h2",{attrs:{id:"获取浏览器大小的常用-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取浏览器大小的常用-api"}},[t._v("#")]),t._v(" 获取浏览器大小的常用 api")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("screen.width 获取屏幕的宽度 跟浏览器无关\nscreen.height 获取屏幕的高度 跟浏览器无关\nscreen.availWidth 获取屏幕有效宽度 如果任务栏设置在左右两侧的话，去除任务栏宽度\nscreen.availHeight 获取屏幕有效高度 去除任务栏高度\n\nwindow.outerWidth 获取浏览器宽度 包括浏览器所有包括侧边栏、窗口镶边和调正窗口大小的边框。\nwindow.outerHeight 获取浏览器高度 包括浏览器所有包括侧边栏、窗口镶边和调正窗口大小的边框。\nwindow.innerWidth：获取浏览器视觉视口宽度（包括滚动条）。\nwindow.innerHeight：获取浏览器视觉视口高度（包括滚动条）。\ndocument.documentElement.clientWidth：获取浏览器布局视口宽度。不包括滚动条。\ndocument.documentElement.clientHeight：获取浏览器布局视口高度。不包括滚动条。\n\ndom.clientWidth：获取元素的宽度 包括内容和内边距\ndom.clientHeight：获取元素的高度 包括内容和内边距\ndom.offsetWidth：获取元素的宽度 包括内容、内边距、滚动条、边框。\ndom.offsetHeight：获取元素的高度 包括内容、内边距、滚动条、边框。\ndom.scrollWidth：获取元素内容实际的宽度 包括内边距。\ndom.scrollHeight：获取元素内容实际的高度 包括内边距。\n\ndom.clientTop：获取元素上边框高度\ndom.clientLeft：获取元素左边框宽度\ndom.offsetTop：获取元素距离页面顶部高度\ndom.offsetLeft：获取元素距离页面左边的宽度\ndom.scrollTop：获取元素滚动条在垂直方向上滚动的距离\ndom.scrollLeft：获取元素滚动条在水平方向上滚动的距离\n")])])]),a("h2",{attrs:{id:"移动端适配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#移动端适配"}},[t._v("#")]),t._v(" 移动端适配")]),t._v(" "),a("p",[t._v("常用的是 rem 和 vw vh")]),t._v(" "),a("h3",{attrs:{id:"rem-方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rem-方案"}},[t._v("#")]),t._v(" rem 方案")]),t._v(" "),a("p",[t._v("rem 利用的是根元素 html font-size 属性。1rem = 根元素的 font-size 大小。")]),t._v(" "),a("p",[t._v("业界比较流行的是 flexible 方案，该方案是阿里早期开源的一个移动端适配解决方案，引用 flexible 后，我们在页面上统一使用 rem 来布局。")]),t._v(" "),a("h3",{attrs:{id:"vw-vh-方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vw-vh-方案"}},[t._v("#")]),t._v(" vw vh 方案")]),t._v(" "),a("p",[t._v("100vw = 屏幕的宽 100vh = 屏幕的高，把屏幕的宽高分成 100 等分")])])}),[],!1,null,null,null);e.default=i.exports}}]);