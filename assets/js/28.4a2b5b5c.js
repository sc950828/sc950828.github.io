(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{384:function(t,a,s){"use strict";s.r(a);var n=s(44),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"js-中数据类型有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-中数据类型有哪些"}},[t._v("#")]),t._v(" js 中数据类型有哪些")]),t._v(" "),s("p",[t._v("js 中数据类型分为基本数据类型和引用数据类型，基本数据类型存在栈中，引用数据类型引用保存在栈中，真实值保存在堆中。")]),t._v(" "),s("ol",[s("li",[t._v("基本数据类型 Number、String、Boolean、Null、Undefined、Symbol、BigInt")]),t._v(" "),s("li",[t._v("引用诗句类型 Object、Function、Array、Date、Error")])]),t._v(" "),s("h2",{attrs:{id:"数据类型判断方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型判断方法"}},[t._v("#")]),t._v(" 数据类型判断方法")]),t._v(" "),s("p",[t._v("数据类型的判断基本有四种方法")]),t._v(" "),s("h3",{attrs:{id:"typeof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typeof"}},[t._v("#")]),t._v(" typeof")]),t._v(" "),s("p",[t._v("typeof 判断基本数据类型的时候除了 null 会判断成 object 其他的都准确。")]),t._v(" "),s("p",[t._v("typeof 判断引用数据类型除了 function 会判断成 function 其他都会被判断成 object。")]),t._v(" "),s("h3",{attrs:{id:"instanceof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#instanceof"}},[t._v("#")]),t._v(" instanceof")]),t._v(" "),s("p",[t._v("instanceof 只能判断出引用数据类型和自定义对象的数据类型。不能判断基本数据类型。")]),t._v(" "),s("h3",{attrs:{id:"object-prototype-tostring-call"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-tostring-call"}},[t._v("#")]),t._v(" Object.prototype.toString.call")]),t._v(" "),s("p",[t._v("Object.prototype.toString.call()能判断 js 的基本数据类型和引用数据类型。但是不能判断出自定义对象的数据类型。")]),t._v(" "),s("h3",{attrs:{id:"对象-constructor-name"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象-constructor-name"}},[t._v("#")]),t._v(" 对象.constructor.name")]),t._v(" "),s("p",[t._v("对象.constructor.name 能获取到对象的构造函数名，也就是数据类型。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("People")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"randy1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//People")]),t._v("\n")])])]),s("h2",{attrs:{id:"其他值到数字值的转换规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他值到数字值的转换规则"}},[t._v("#")]),t._v(" 其他值到数字值的转换规则？")]),t._v(" "),s("p",[t._v("有时我们需要将非数字值当作数字来使用，比如数学运算。")]),t._v(" "),s("ol",[s("li",[t._v("Undefined 类型的值转换为 NaN。")]),t._v(" "),s("li",[t._v("Null 类型的值转换为 0。")]),t._v(" "),s("li",[t._v("Boolean 类型的值，true 转换为 1，false 转换为 0。")]),t._v(" "),s("li",[t._v("String 类型的值转换如同使用 Number() 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。")]),t._v(" "),s("li",[t._v("Symbol 类型的值不能转换为数字，会报错。")]),t._v(" "),s("li",[t._v("对象（包括数组）会首先调用 valueOf() 方法。如果没有返回基本类型值，就继续调用 toString() 的返回值（如果存在）来进行强制类型转换。如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。")])]),t._v(" "),s("h2",{attrs:{id:"其他值到字符串的转换规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他值到字符串的转换规则"}},[t._v("#")]),t._v(" 其他值到字符串的转换规则？")]),t._v(" "),s("ol",[s("li",[t._v('Null 和 Undefined 类型 ，null 转换为 "null"，undefined 转换为 "undefined"，')]),t._v(" "),s("li",[t._v('Boolean 类型，true 转换为 "true"，false 转换为 "false"。')]),t._v(" "),s("li",[t._v("Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。")]),t._v(" "),s("li",[t._v("Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。")]),t._v(" "),s("li",[t._v("对普通对象来说，除非自行定义 toString() 方法，否则会调用 toString()（Object.prototype.toString()）来返回内部属性 "),s("code",[t._v("[[Class]]")]),t._v(' 的值，如"[object Object]"。如果对象有自己的 toString() 方法，字符串化时就会调用该方法并使用其返回值。')])]),t._v(" "),s("h2",{attrs:{id:"其他值到布尔类型的值的转换规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他值到布尔类型的值的转换规则"}},[t._v("#")]),t._v(" 其他值到布尔类型的值的转换规则？")]),t._v(" "),s("p",[t._v('除了这些假值：undefined、null、false、 +0、-0、NaN、"" 布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。')]),t._v(" "),s("h2",{attrs:{id:"symbol-值的强制类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol-值的强制类型转换"}},[t._v("#")]),t._v(" Symbol 值的强制类型转换？")]),t._v(" "),s("ol",[s("li",[t._v("Symbol 值不能够被强制类型转换为数字（显式和隐式都会产生错误）。")]),t._v(" "),s("li",[t._v("ES6 允许从 Symbol 到字符串的显式强制类型转换，然而隐式强制类型转换会产生错误。")]),t._v(" "),s("li",[t._v("Symbol 可以被强制类型转换为布尔值（显式和隐式结果都是 true ）。")])]),t._v(" "),s("h2",{attrs:{id:"常见问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[t._v("#")]),t._v(" 常见问题")]),t._v(" "),s("h3",{attrs:{id:"解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字-它们之间的区别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字-它们之间的区别是什么"}},[t._v("#")]),t._v(" 解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字，它们之间的区别是什么？")]),t._v(" "),s("p",[t._v("解析允许字符串（如 parseInt() ）中含有非数字字符，解析按从左到右的顺序，如果遇到非数字字符就停止。而转换（如 Number ()）不允许出现非数字字符，否则会失败并返回 NaN。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123-"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//123")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123-"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])])]),s("h3",{attrs:{id:"操作符什么时候用于字符串的拼接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操作符什么时候用于字符串的拼接"}},[t._v("#")]),t._v(" + 操作符什么时候用于字符串的拼接？")]),t._v(" "),s("ul",[s("li",[t._v("简单来说就是，如果 + 的其中一个操作数是字符串（或者通过转换 toString valueOf "),s("code",[t._v("[symbol.toPrimitive]")]),t._v("最终得到字符串），则执行字符串拼接，否则执行数字加法。")]),t._v(" "),s("li",[t._v("那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字。")])]),t._v(" "),s("h3",{attrs:{id:"操作符的强制类型转换规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操作符的强制类型转换规则"}},[t._v("#")]),t._v(" == 操作符的强制类型转换规则？")]),t._v(" "),s("ul",[s("li",[t._v("字符串和数字之间的相等比较，将字符串转换为数字之后再进行比较。")]),t._v(" "),s("li",[t._v("其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，true 变 1，false 变 0，再应用其他规则进行比较。")]),t._v(" "),s("li",[t._v("null 和 undefined 之间的相等比较，结果为真。其他值和它们进行比较都返回假值。")]),t._v(" "),s("li",[t._v("对象和非对象之间的相等比较，对象先调用 valueOf 或者 toString 抽象操作后变为基本类型，再进行比较。")]),t._v(" "),s("li",[t._v("如果一个操作值为 NaN ，则相等比较返回 false（ NaN 本身也不等于 NaN ）。")]),t._v(" "),s("li",[t._v("如果两个操作值都是对象，则比较它们是不是指向同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回 true，否则，返回 false。")])]),t._v(" "),s("h3",{attrs:{id:"什么情况下会发生布尔值的隐式强制类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么情况下会发生布尔值的隐式强制类型转换"}},[t._v("#")]),t._v(" 什么情况下会发生布尔值的隐式强制类型转换？")]),t._v(" "),s("ul",[s("li",[t._v("if (..) 语句中的条件判断表达式。")]),t._v(" "),s("li",[t._v("for ( .. ; .. ; .. ) 语句中的条件判断表达式（第二个）。")]),t._v(" "),s("li",[t._v("while (..) 和 do..while(..) 循环中的条件判断表达式。")]),t._v(" "),s("li",[t._v("? : 中的条件判断表达式。")]),t._v(" "),s("li",[t._v("逻辑运算符 ||（逻辑或）和 &&（逻辑与）左边的操作数（作为条件判断表达式）。")])]),t._v(" "),s("h3",{attrs:{id:"和-操作符的返回值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#和-操作符的返回值"}},[t._v("#")]),t._v(" || 和 && 操作符的返回值？")]),t._v(" "),s("ul",[s("li",[t._v('&& 也可以叫逻辑与，在其操作数中找到第一个虚值表达式并返回它，如果没有找到任何虚值表达式，则返回最后一个真值表达式。console.log(" " && true && 5); // 5')]),t._v(" "),s("li",[t._v("|| 也叫或逻辑或，在其操作数中找到第一个真值表达式并返回它。这也使用了短路来防止不必要的工作。console.log(null || 1); // 1")]),t._v(" "),s("li",[t._v("|| 和 && 返回它们其中一个操作数的值，而非条件判断的结果。")])]),t._v(" "),s("h3",{attrs:{id:"如何将字符串转化为数字-例如-12-3b"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何将字符串转化为数字-例如-12-3b"}},[t._v("#")]),t._v(" 如何将字符串转化为数字，例如 '12.3b'?")]),t._v(" "),s("ul",[s("li",[t._v("（1）使用 Number() 方法，前提是所包含的字符串不包含不合法字符。")]),t._v(" "),s("li",[t._v("（2）使用 parseInt() 方法，parseInt() 函数可解析一个字符串，并返回一个整数。还可以设置要解析的数字的基数。当基数的值为 0，或没有设置该参数时，parseInt() 会根据 string 来判断数字的基数。")]),t._v(" "),s("li",[t._v("（3）使用 parseFloat() 方法，该函数解析一个字符串参数并返回一个浮点数。")]),t._v(" "),s("li",[t._v("（4）使用 + 操作符的隐式转换。")])]),t._v(" "),s("h3",{attrs:{id:"tostring-valueof-的执行原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tostring-valueof-的执行原理"}},[t._v("#")]),t._v(" toString valueOf 的执行原理")]),t._v(" "),s("p",[t._v("对象输出的时候会调用 valueOf 方法(除了 new Date 对象会调用 toString()方法)，返回对象的原始值。")]),t._v(" "),s("p",[t._v("对象在转换基本类型时，会调用 valueOf 和 toString，先调用哪个方法，主要是要看这个对象倾向于转换为什么。如果倾向于转换为 Number 类型的，就优先调用 valueOf；如果倾向于转换为 String 类型，就先调用 toString。")]),t._v(" "),s("p",[t._v("比如使用了 new Number()转换就会先调用 valueOf()方法，如果 valueOf() 没有返回基本类型就会再调用 toString()方法，如果都没返回基本类型则报错。但是如果只重写了 toString 方法，而没有重写 valueOf 方法，则会调用 toString 方法")]),t._v(" "),s("p",[t._v("比如使用了 new String()转换就会先调用 toString()方法，如果 toString()没有返回基本类型就会再调用 valueOf()方法，如果都没返回基本类型则报错。")]),t._v(" "),s("p",[t._v("如果有 Symbol.toPrimitive 属性的话，则只会调用 Symbol.toPrimitive 方法，toString 和 valueOf 方法就不会调用了。并且该方法只能返回基本类型，否则会报错。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"randy"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"toString"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"toString"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// return {}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"valueOf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// return "valueOf"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toPrimitive"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"primitive"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"primi"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);