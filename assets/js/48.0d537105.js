(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{404:function(t,e,o){"use strict";o.r(e);var r=o(44),v=Object(r.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h2",{attrs:{id:"生命周期函数"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#生命周期函数"}},[t._v("#")]),t._v(" 生命周期函数")]),t._v(" "),o("h3",{attrs:{id:"一、组件在初始化时会触发-5-个钩子函数"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#一、组件在初始化时会触发-5-个钩子函数"}},[t._v("#")]),t._v(" 一、组件在初始化时会触发 5 个钩子函数：")]),t._v(" "),o("p",[t._v("dufaultProps{}")]),t._v(" "),o("p",[t._v("设置默认的 props，es6 中用 static dufaultProps={} 设置组件的默认属性。在整个生命周期只执行一次。")]),t._v(" "),o("p",[t._v("constructor(props)")]),t._v(" "),o("p",[t._v("可以直接在 constructor 中定义 this.state。此时可以访问 this.props。")]),t._v(" "),o("p",[t._v("componentWillMount() 能在一次渲染中多次调用.")]),t._v(" "),o("p",[t._v("组件初始化时调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改 state。")]),t._v(" "),o("p",[t._v("render()")]),t._v(" "),o("p",[t._v("React 最重要的步骤，创建虚拟 dom，进行 diff 算法，更新 dom 树都在此进行。此时就不能更改 state 了。")]),t._v(" "),o("p",[t._v("componentDidMount()")]),t._v(" "),o("p",[t._v("目前官方推荐的异步请求是在 componentDidMount 中进行.因为 render 或者 componentWillMount 可能重复多次执行。")]),t._v(" "),o("p",[t._v("组件渲染之后调用，可以通过 this.getDOMNode()获取和操作 dom 节点，只调用一次。")]),t._v(" "),o("h4",{attrs:{id:"父子组件渲染"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#父子组件渲染"}},[t._v("#")]),t._v(" 父子组件渲染")]),t._v(" "),o("ul",[o("li",[t._v("father constructor father")]),t._v(" "),o("li",[t._v("father componentWillMount")]),t._v(" "),o("li",[t._v("father render")]),t._v(" "),o("li",[t._v("child constructor 1")]),t._v(" "),o("li",[t._v("child componentWillMount")]),t._v(" "),o("li",[t._v("child render")]),t._v(" "),o("li",[t._v("child componentDidMount")]),t._v(" "),o("li",[t._v("father componentDidMount")])]),t._v(" "),o("h3",{attrs:{id:"二、在更新时也会触发-5-个钩子函数"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#二、在更新时也会触发-5-个钩子函数"}},[t._v("#")]),t._v(" 二、在更新时也会触发 5 个钩子函数：")]),t._v(" "),o("p",[t._v("componentWillReceivePorps(nextProps)")]),t._v(" "),o("p",[t._v("组件初始化时不调用，组件接受新的 props 时调用。不管父组件传递给子组件的 props 有没有改变，都会触发。")]),t._v(" "),o("p",[t._v("shouldComponentUpdate(nextProps, nextState) 必须返回 true 或 false 返回 false 不往下走")]),t._v(" "),o("p",[t._v("React 性能优化非常重要的一环。组件接受新的 state 或者 props 时调用，我们可以设置在此对比前后两个 props 和 state 是否相同，如果相同则返回 false 阻止更新，因为相同的属性状态一定会生成相同的 dom 树，这样就不需要创造新的 dom 树和旧的 dom 树进行 diff 算法对比，节省大量性能，尤其是在 dom 结构复杂的时候。不过调用 this.forceUpdate 会跳过此步骤。")]),t._v(" "),o("p",[t._v("我们还可以在创建组件的时候继承 PureComponent，因为它用当前与之前 props 和 state 的浅比较覆写了 shouldComponentUpdate() 的实现。也能达到性能优化。")]),t._v(" "),o("p",[t._v("componentWillUpdate(nextProps, nextState)")]),t._v(" "),o("p",[t._v("组件初始化时不调用，只有在组件将要更新时才调用，此时可以修改 state")]),t._v(" "),o("p",[t._v("render()")]),t._v(" "),o("p",[t._v("不多说")]),t._v(" "),o("p",[t._v("componentDidUpdate(preProps, preState)")]),t._v(" "),o("p",[t._v("组件初始化时不调用，组件更新完成后调用，此时可以获取 dom 节点。")]),t._v(" "),o("h4",{attrs:{id:"父子组件更新渲染"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#父子组件更新渲染"}},[t._v("#")]),t._v(" 父子组件更新渲染")]),t._v(" "),o("ul",[o("li",[t._v('father shouldComponentUpdate {name: "father"} {count: 2}')]),t._v(" "),o("li",[t._v("father componentWillUpdate 组件将要更新")]),t._v(" "),o("li",[t._v("father render")]),t._v(" "),o("li",[t._v("child componentWillReceiveProps")]),t._v(" "),o("li",[t._v('child shouldComponentUpdate {count: 2, name: "child"} null')]),t._v(" "),o("li",[t._v("child componentWillUpdate 组件将要更新")]),t._v(" "),o("li",[t._v("child render")]),t._v(" "),o("li",[t._v("child componentDidUpdate 组件更新完毕")]),t._v(" "),o("li",[t._v("father componentDidUpdate 组件更新完毕")])]),t._v(" "),o("h3",{attrs:{id:"三、卸载钩子函数"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#三、卸载钩子函数"}},[t._v("#")]),t._v(" 三、卸载钩子函数")]),t._v(" "),o("p",[t._v("componentWillUnmount() 定时器的清除\n组件将要卸载时调用，一些事件监听和定时器需要在此时清除。")]),t._v(" "),o("h3",{attrs:{id:"新的生命周期方法"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#新的生命周期方法"}},[t._v("#")]),t._v(" 新的生命周期方法")]),t._v(" "),o("p",[t._v("React 16 之后有三个生命周期被废弃(但并未删除)componentWillReceivePorps componentWillUpdate componentWillMount 新增如下两个生命周期函数")]),t._v(" "),o("p",[t._v("static getDerivedStateFromProps(nextProps,prevState)：接收父组件传递过来的 props 和组件之前的状态，返回一个对象来更新 state 或者返回 null 来表示接收到的 props 没有变化，不需要更新 state。此方法在更新和挂载阶段都可能会调用")]),t._v(" "),o("p",[t._v("getSnapshotBeforeUpdate(prevProps, prevState)：接收父组件传递过来的 props 和组件之前的状态，此生命周期钩子必须有返回值，返回值将作为第三个参数传递给 componentDidUpdate。必须和 componentDidUpdate 一起使用，否则会报错\n该生命周期钩子触发的时机 ：被调用于 render 之后、componentDidUpdate 之前")]),t._v(" "),o("h4",{attrs:{id:"新版本父子组件渲染"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#新版本父子组件渲染"}},[t._v("#")]),t._v(" 新版本父子组件渲染")]),t._v(" "),o("p",[t._v("在新版本中 getDerivedStateFromProps 方法会替换 componentWillMount、componentWillReceiveProps、componentWillUpdate")]),t._v(" "),o("ul",[o("li",[t._v("father constructor father")]),t._v(" "),o("li",[t._v('father getDerivedStateFromProps {name: "father"} {count: 1}')]),t._v(" "),o("li",[t._v("father render")]),t._v(" "),o("li",[t._v("child constructor 1")]),t._v(" "),o("li",[t._v('child getDerivedStateFromProps {count: 1, name: "child"} {}')]),t._v(" "),o("li",[t._v("child render")]),t._v(" "),o("li",[t._v("child componentDidMount")]),t._v(" "),o("li",[t._v("father componentDidMount")])]),t._v(" "),o("h4",{attrs:{id:"新版本父子组件渲染-2"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#新版本父子组件渲染-2"}},[t._v("#")]),t._v(" 新版本父子组件渲染")]),t._v(" "),o("ul",[o("li",[t._v('father getDerivedStateFromProps {name: "father"} {count: 2}')]),t._v(" "),o("li",[t._v('father shouldComponentUpdate {name: "father"} {count: 2}')]),t._v(" "),o("li",[t._v("father render")]),t._v(" "),o("li",[t._v('child getDerivedStateFromProps {count: 2, name: "child"} {}')]),t._v(" "),o("li",[t._v('child shouldComponentUpdate {count: 2, name: "child"} {}')]),t._v(" "),o("li",[t._v("child render")]),t._v(" "),o("li",[t._v('child getSnapshotBeforeUpdate {count: 1, name: "child"} {}')]),t._v(" "),o("li",[t._v('father getSnapshotBeforeUpdate {name: "father"} {count: 1}')]),t._v(" "),o("li",[t._v("child componentDidUpdate 组件更新完毕")]),t._v(" "),o("li",[t._v("father componentDidUpdate 组件更新完毕")])])])}),[],!1,null,null,null);e.default=v.exports}}]);