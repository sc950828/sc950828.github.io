(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{451:function(a,t,s){"use strict";s.r(t);var e=s(44),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"进制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进制"}},[a._v("#")]),a._v(" 进制")]),a._v(" "),s("h3",{attrs:{id:"进制的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进制的定义"}},[a._v("#")]),a._v(" 进制的定义")]),a._v(" "),s("p",[a._v("进位制是一种记数方式，亦称进位计数法或位值计数法。")]),a._v(" "),s("p",[a._v("使用的数字符号的数目称为这种进位制的基数或底数。")]),a._v(" "),s("h3",{attrs:{id:"常见的进制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的进制"}},[a._v("#")]),a._v(" 常见的进制")]),a._v(" "),s("p",[a._v("二进制 0b、八进制 0o、十六进制 0x")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("1024 = 0b1000000000\n1024=0o2000\n1024=0x400\n")])])]),s("h3",{attrs:{id:"进制转化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进制转化"}},[a._v("#")]),a._v(" 进制转化")]),a._v(" "),s("p",[a._v("十进制转其他进制使用重复相除法。用十进制数一直除相应的进制直到商是 0 位置，然后从后往前取余数。")]),a._v(" "),s("p",[a._v("十进制小数转为其他进制。方式是采用“乘 相应进制 取整，顺序排列”法。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("比如十进制数0.25转二进制\n0.25 * 2 = 0.5 取出整数部分：0\n0.5 * 2 = 1.0 取出整数部分 1\n所以 0.25 的二进制是 0.01\n\n比如十进制0.5625转二进制\n0.5625 * 2 = 1.125 取整数 1\n0.125 * 2 = 0.25 取整数 0\n0.25 * 2 = 0.5 取整数 0\n0.5 * 2 = 1.0 取整数 1\n所以 0.5625的二进制是0.1001\n")])])]),s("p",[a._v("其他进制转十进制使用按权展开法。用相应进制乘以每个数乘以(从 0 开始)次方的和。注意小数点后是乘以它的负相应次方。")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("用 2 乘十进制小数，可以得到积，将积的整数部分取出")])]),a._v(" "),s("li",[s("p",[a._v("再用 2 乘余下的小数部分，又得到一个积，再将积的整数部分取出")])]),a._v(" "),s("li",[s("p",[a._v("如此进行，直到积中的小数部分为零，或者达到所要求的精度为止")])]),a._v(" "),s("li",[s("p",[a._v("比如十进制 0.25 转为二进制")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("0.25 * 2 = 0.5")]),a._v(" 取出整数部分：0")]),a._v(" "),s("li",[s("code",[a._v("0.5 * 2 = 1.0")]),a._v(" 取出整数部分 1")]),a._v(" "),s("li",[a._v("所以 0.25 的二进制是 0.01")])])])]),a._v(" "),s("h4",{attrs:{id:"十进制转二进制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#十进制转二进制"}},[a._v("#")]),a._v(" 十进制转二进制")]),a._v(" "),s("p",[a._v("用十进制数一直除 2，直到商是 0 位置，然后从后往前取余数。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("52 => 110100\n\n52除2 等于26 余0\n26除2 等于13 余0\n13除2 等于6 余1\n6除2 等于3 余0\n3除2 等于1 余1\n1除2 等于0 余1\n")])])]),s("h4",{attrs:{id:"十进制转八进制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#十进制转八进制"}},[a._v("#")]),a._v(" 十进制转八进制")]),a._v(" "),s("p",[a._v("用十进制数一直除 8，直到商是 0 位置，然后从后往前取余数。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("52 => 64\n\n52除8 等于6 余4\n6除8 等于0 余6\n")])])]),s("h4",{attrs:{id:"十进制转十六进制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#十进制转十六进制"}},[a._v("#")]),a._v(" 十进制转十六进制")]),a._v(" "),s("p",[a._v("用十进制数一直除 16，直到商是 0 位置，然后从后往前取余数。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("52 => 34\n\n52除16 等于3 余4\n3除8 等于0 余3\n")])])]),s("h4",{attrs:{id:"二进制转十进制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二进制转十进制"}},[a._v("#")]),a._v(" 二进制转十进制")]),a._v(" "),s("p",[a._v("二进制的每个数去乘以 2 的相应位置(从 0 开始)次方,注意小数点后是乘以它的负相应次方。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("101.1 1*2的二次方 + 0*2的一次方 +1*2的零次方 + 1*2的负一次方 = 5.5\n")])])]),s("h4",{attrs:{id:"八进制转十进制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#八进制转十进制"}},[a._v("#")]),a._v(" 八进制转十进制")]),a._v(" "),s("p",[a._v("八进制的每个数去乘以 8 的相应位置(从 0 开始)次方,注意小数点后是乘以它的负相应次方。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("1314 1*8的三次方 + 3*8的二次方 + 1*8的一次方 + 4*8的零次方 = 512+192+8+4 = 716\n")])])]),s("h4",{attrs:{id:"十六进制转十进制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#十六进制转十进制"}},[a._v("#")]),a._v(" 十六进制转十进制")]),a._v(" "),s("p",[a._v("十六进制的每个数去乘以 16 的相应位置(从 0 开始)次方,注意小数点后是乘以它的负相应次方。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("1314 1*16的三次方 + 3*16的二次方 + 1*16的一次方 + 4*16的零次方 = 4096+768+16+4 = 4884\n")])])]),s("h2",{attrs:{id:"有符号数与无符号数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有符号数与无符号数"}},[a._v("#")]),a._v(" 有符号数与无符号数")]),a._v(" "),s("p",[a._v("计算机里面使用 0 表示正数使用 1 表示负数。放在所有数字的最前面。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("+237 = 011101101\n-237 = 111101101\n")])])]),s("h2",{attrs:{id:"原码-反码-补码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原码-反码-补码"}},[a._v("#")]),a._v(" 原码 反码 补码")]),a._v(" "),s("p",[a._v("原码是计算机中对数字的二进制的定点表示方法，最高位表示符号位，其余位表示数值位。优点是易于分辨，缺点是不能够直接参与运算。")]),a._v(" "),s("p",[a._v("正数的反码和其原码一样。负数的反码，符号位为 1，数值部分按原码取反。")]),a._v(" "),s("p",[a._v("正数的补码和其原码一样。负数的补码为其反码加 1。")]),a._v(" "),s("h3",{attrs:{id:"负数补码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#负数补码"}},[a._v("#")]),a._v(" 负数补码")]),a._v(" "),s("p",[a._v("之所以在计算机中使用补码来表示负数的原因是，这样可以将加法运算扩展到所有的数值计算上，因此在数字电路中我们只需要考虑加法器的设计就行了，而不用再为减法设置新的数字电路。")]),a._v(" "),s("h2",{attrs:{id:"定点数与浮点数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定点数与浮点数"}},[a._v("#")]),a._v(" 定点数与浮点数")]),a._v(" "),s("p",[a._v("数字由符号位+数值位表示")]),a._v(" "),s("h3",{attrs:{id:"什么是定点数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是定点数"}},[a._v("#")]),a._v(" 什么是定点数")]),a._v(" "),s("p",[a._v("小数点固定在某个位置的数称之为定点数。要么是纯整数要么是纯小数。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("小数点放在符号位后面 比如 0.11101101 这也被称为纯小数\n小数点放数值位后面 011101101. 这也被称为纯整数\n")])])]),s("h3",{attrs:{id:"什么是浮点数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是浮点数"}},[a._v("#")]),a._v(" 什么是浮点数")]),a._v(" "),s("p",[a._v("N = S "),s("code",[a._v("*")]),a._v(" r "),s("sup",[a._v("j")]),a._v(" 其中 S 为位数 r 为基数 j 为阶码。S 需要是纯小数。")]),a._v(" "),s("p",[a._v("单精度浮点数 使用 4 个字节、32 位来表达浮点数（float）")]),a._v(" "),s("p",[a._v("双精度浮点数 使用 8 个字节、64 位来表达浮点数（double）")])])}),[],!1,null,null,null);t.default=r.exports}}]);